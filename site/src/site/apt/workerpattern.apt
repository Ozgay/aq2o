Worker pattern

	Throughout AQ, you may encounter the worker pattern. It is a reimplementation of a worker/workerthread pattern 
	that gives you a lot of control how things are implemented. It is compound of a worker implementation and a workerThread implementation. 
	The worker thread will take work packages from a queue.  
	Both classes exist already, so that you can extend these classes with your own code. It is good practice to implement the worker's process 
	method in such a way that it sets its internal runflag to false, should a terminal object be contained in the queue. 
	
	The following code snipplet shows you how to implement the worker.  
	
+----------+
class AnonymousWorker extends Worker<String> {
        public void process(String event) {
            if (event.equals("TERMINATE")) {
                setRunFlag(false);
                return;
            }
            // ... do something else here.             
        }
}
+----------+
	 
	 In order to spawn new workers, you need to instantiate an arbitrary amount of new worker threads. In the following example, imagine 
	 we parse over a list of filenames and want to process four files at the same time. 

+----------+	 
LinkedBlockingQueue<String> fileNameQueue = new LinkedBlockingQueue<String>();
//... put some files into the filename queue. 


// ... now also put four terminal objects (in this case the string "TERMINATE") into the queue. 

for (int i = 0; i < 4; i++) fileNameQueue.add("TERMINATE");

// .. now spawn four workers and start them. 
new Thread(new WorkerThread<String>(fileNameQueue, new AnonymousWorker())).start();
new Thread(new WorkerThread<String>(fileNameQueue, new AnonymousWorker())).start();
new Thread(new WorkerThread<String>(fileNameQueue, new AnonymousWorker())).start();
new Thread(new WorkerThread<String>(fileNameQueue, new AnonymousWorker())).start();
+----------+	 

	The four workers will now process the queue and will stop on the word "TERMINATE".  
