Data Access Object layer

	The DAO layer provides interfaces and an implementation to CRUD AQ's domain model objects. As usual, here again you will find a factory/interface pattern. The factory interface defines all DAO interface creation methods. The individual DAO interfaces, such as IMarketDataInstrumentDao, define type specific access and modification methods next to the generic create, read, update and delete methods. 

	Each DAO layer implementation has its own requirements. 

MyBatis DAO layer

* Setup
	
	Before you can use the MyBatis DAO layer, the database has to be initialized. The layer will generate tables and indices on tables itself, but expects that a database exists and is accessible for the framework. 
	By default, AQ uses the HSQL database shipped in the {{{./uberjar.html}AQ2 Server}}. In case you want to use MySQL, you will have to create before first use the database from within mysql with the following command.  
	 
+---------+
mysql> create database aq2o;
Query OK, 1 row affected (0.13 sec)
mysql> 
+---------+
	
	The database configuration is read from the file "framework.properties", which must reside somewhere in your classpath. The following snipplet shows all database related properties that have to be set in the properties file.
	You are free to modify the file to match a MySQL connector as shown below. 

+------------------+
#db
db.driver=org.gjt.mm.mysql.Driver
db.url=jdbc:mysql://localhost:3306/aq2o
db.username=writer
db.password=writerpwd
+------------------+



* MyBatis DAO factory

	The MyBatis DAO factory requires a database configuration properties file in the well-known Java properties file format. 
	The MyBatis DAO factory will also initialize the database tables on initialization in case these tables do not exist. 	



* Example use: IInstrumentDao

	First, initialize the dao factory by loading an application context. Usually, this is done only in one place, for example in a spring configuration file which tells Spring to 
	inject the dao factory into your code. For the sake of this example, we assume that injection is not happening. 
	 
	 The following code shows how to obtain the DAO factory and how to obtain an instrument DAO. 
	 
+------------+
ApplicationContext appContext = new ClassPathXmlApplicationContext("springtest.xml");
IDaoFactory idf = appContext.getBean("ibatisDao", IDaoFactory.class);
IInstrumentDao idao = idf.instrumentDao();
+------------+

	Once you have an instrument DAO, you can CRUD objects and perform other, DAO specific functions such as search by specific parameters. The following 
	code snipplet shows you how to create a Future object and how to load it at another time. 
	
+-----------+
// instantiate a Future. 
Future future = new Future();
future.setName("FDAX");
future.setDescription("The dax future");
future.setExpiry(20111231l);
future.setShortName("FDAX");
future.setTickSize(10.0);
future.setTickValue(10.0);

// finally create it. 
idao.create(future);

....

// load the future
Future loadedFuture = (Future) idao.load(future.getId());
+-----------+

	Using AQ's generic DAO pattern approach, you can easily add new classes, for example new Instrument types, and store them in a seamless way.  
	