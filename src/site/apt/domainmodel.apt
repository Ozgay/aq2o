Domain model

	I cannot stress it enough. This is the most important part of any project or application and ActiveQuant is no exception. While the idea of AQ's domain model follows a {{{http://en.wikipedia.org/wiki/Domain-driven_design}domain driven design}} methodology, it is in its current implementation not implementing DDD in its entirety. 

	The domain model is split into an instrument section and a trading and simulation section. The latter makes only sense with the former. 

Implementation details

	The implementation evolves around a so called persistent entities (see {{{./apidocs/com/activequant/domainmodel/PersistentEntity.html}JavaDocs}}). All domain model entities should contain only Double, String and Long values and arrays thereof. The persistent entity is a smart object that can convert an object and its properties to and from a map object. The code itself is pretty lean and uses reflection a lot. In the near future, this might change, but has served very well so far. 


In general ...

      ... we distinguish between an instrument, data feed instrument and traded instrument. 
      One instrument can be available from multiple data feeds and multiple trading venues. 
      Data feed and trading venue are two separate entities. Trading venues are not the same as 
      data feed locations, for example Bloomberg and EUREX. Nonetheless, a trading venue could 
      also provide a market data feed, in which case we would have a data feed entry for EUREX next to 
      EUREX as a trading venue for an instrument.    

      In order to fetch information from the archive, you have to specify which _specific_ market data instrument you would 
      like to load. 


Domain model overview

	The following diagram shows how these entities relate to each other. 
	
	<Note: This domain model is not fully up-to-date.> 

[./images/domainmodel.png] Domain model
		

* Instrument information domain model 

	Instruments can be of type Future, Stock, etc. all extending the abstract Instrument class. 
	An Instrument instance describes the instrument and can be linked to a Market Data Instrument and
	a Tradeable Instrument. The latter two contain provider or venue specific settings, such as 
	venue specific IDs.    

* Trading and simulation domain model
	
	This one is more complicated. 

** Order books

	Every tradeable instrument has one and only one order book per venue. 
	Note, you would have multiple order books for the same instrument if you are connected 
	to the same venue with multiple accounts. 
	
	Trading systems can access these order books. 
	
	Three types of events can happen in order book: 
	
	[[1]] It can change its state or phase, the so called market phase or market state. For example, it can go from closed, to auction, to pre-open to open to close. Details about this are available on any good website. 
	
	[[1]] Orders of other participants are added, updated or removed. Usually, any party connecting to a venue will only see anonymous order adds, deletions and updates in the form of changing bid/ask prices and quantities. 
	
	[[1]] The venue signals a transaction related event, for example an execution or the cancellation of an errenous execution. 
	
	
	Different venues and their corresponding implementations can extend these base entities, so that your trading system can also work with venue specific situations. 
	
	Event consumers, such as trading systems can register on the order book interface for these three types of events, they will have to work these events out themself. 
	
** Order related

	This section is about the orders that your trading system is going to send. 
	
	It uses Mike's excellent Order Tracker interface. 
	
	AQ2o knows several order types, which all extend an Order, for example SingleLegOrder, LimitOrder, StopLimitOrder, etc. 
	
	You cannot submit an order directly to a venue, instead you have to at first prepare an order (see the prepareOrder method) at a venue, 
	the implementation will then return an IOrderTracker implementation. You register at the order tracker for order events, details later. 
	The order tracker has contains all order action related methods, such as submit, update or cancel order. 
	
	Your orders flow through an order lifecycle. On the happy trail, the stations for your order are: 
	
	[[1]] Submitted, to venue
	
	[[1]] Accepted, by venue
	
	[[1]] Filled, by venue
	
	
	However, there are of course also other stations, such as partially filled or even rejected or cancelled. It is up to your trading system to 
	handle these different events and react as needed or wanted. 
	
	Examples of how to consume these events are available in the trading system related section of this webpage. 	 
		
	   
* Streaming

	<Note. Currently I think about switching entirely to FIX, also for internal messaging. But this is entirely undecided and uncooked.>
	
** MarketDataEvent

	All events derive from a StreamEvent, which is also the base class for a MarketDataEvent
	
** Ticks

	Deliver tick data
	
** MarketDataSnapshot

	Deliver market data snapshots. 		