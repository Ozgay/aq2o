ActiveQuant high-level overview

	ActiveQuant is built out of a large plurality of open source libraries and components. At its bottom rests HBase as non-relational database and on MySQL as a relational database. It uses both relational and non-relational databases to store different types of information. These different types of information are timeseries data and static data, such as instrument specific reference data, such as news items, such as configuration parameters. By default, it includes the HSQL database and an HBase server in bundled form, in the so-called uber jar.

	One layer higher we find a very sophisticated DAO layer, this layer contains all interfacing functions which interact with the external applications and other applications mentioned before. The entire interface layer is built very flexibly. It implements interfaces which are defined in the same areas as the actual implementations. By building on a proper object oriented design, which interfaces and implementations of these are, you are able to extend and tailor ActiveQuant to your own environment. As an example, think of a specific storage application dominant in your corporation. For example, by reimplementing the archive reader interface, you are able to support ActiveQuant in your corporate environments, without modifying any other parts of ActiveQuant. A typical example of such a storage layer reimplementation would be a CSV archive reader and writer. By default, ActiveQuant builds on HSQL and JDBC, we might also think about implementing and plugging in ActiveQuant into an Oracle environment. In such a case, although Oracle is SQL is also an SQL-based database, you might imagine that the effort is not that large and you are right. But we still would have to pay tribute to Oracle specific scenarios, such as difference in the serialization parameters etc. Luckily, ActiveQuant is a really designed in such a way that the DAO layer allows configuration and minimizes development efforts. You would only have to modify the database configuration files, which contain database specific connectivity settings. One layer above the interfacing implementations, we find the business logic layer.


	ActiveQuant's business logic layer contains all business oriented functionality, particularly it contains glue ware that uses methods and classes found in the lower layers. Typical classes to be found in these locations are back testing functionality, user interface control functionality or the logic for PnL calculation. All these different pieces use, as already said, functionality from layers underneath. This layer also offers services, higher-level services, to the layers above. We usually think of this layer as the control part in MVC based models. For those that are unfamiliar with MVC designs, please read up on popular websites like Wikipedia about MVC-based design. The business logic layer also contains calendar functionality or business day calculations. It is also here where can find and should find trading system implementations. One example of a trading system is included in the current ActiveQuant distribution, it is an adaptation of the very popular approach to trade one instrument based on moving averages. You can find this example in the SMA package. As already mentioned, the business layer also contains a virtual exchange. The virtual exchange is a detail that deserves more space. The virtual exchange allows simulation of a market and testing of trading systems under almost real market conditions. It subscribes to event streams, which are replayed from data stored in the archive, and based on these events provides an order book implementation, just like the actual market connectivity implementations will do. It also includes a matcher, which matches orders originating either from an trading system or from a user interface, with replayed market data. It simulates matching based on time and price priority. First prize, second time. Let us now go on to the next layer above the business logic layer, the interaction or user interface layer.


	Let us now talk about the user interface layer of ActiveQuant. The user interface layout ActiveQuant contains interfaces and implementations of very important user interface elements, such as quote table all the tables execution tables or audit table. By default it does not contain visual representations or reasonable implementations of these interfaces, but stubbs. Proper user interface implementations are available on request against a fair monthly fee. Nonetheless the user interface layer of ActiveQuant contains a very basic interface to control a back test. In addition to graphical representations of user interfaces, this layer also contains machine-readable or machine usable interface implementations. One example of a user interface in machine-readable form is SOAP, simple object access protocol, supported by many languages such as .NET, Perl or Python. Particularly the interaction with other applications greatly simplifies through this very convenient way to expose functionality. This layer also contains REST functionality, which allows accessing information stored in the ActiveQuant ecosystem from tools such as R, Matlab or Excel. The user interface interaction functions rely on, like everywhere in ActiveQuant, on additional libraries. Noteworthy are Apache's CXF library and the Jetty web server. That should be all for now, please proceed to pages that describe in more detail things you would like to know.

Some details about the used technologies. 

*--+--+--+
|<<Functionality>>  | <<Used technology>> | <<Comments>> |
*--+--+--+
| Overall framework | Spring |  |
*--+--+--+
|Time series database   | HBase, Hadoop  |   |
*--+--+--+
|Reference and other data storage   | MyBatis, MySQL  |   |
*--+--+--+
| SOAP Service Facade | Apache CXF |  |
*--+--+--+
| Messaging Layer | JMS, Apache ActiveMQ |  |
*--+--+--+

	
