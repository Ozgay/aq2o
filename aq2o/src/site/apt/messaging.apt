Messaging

	Sooner or later you need to send information from one point to another in your environment. Common standard technologies to achieve this are JMS or Stomp. Particularly JMS has many advantages and knows such things like queues and topics. As other sources provide more than enough information about JMS and its advantages, we direct the interested reader to these locations. 

	As usual, messaging functionality is hidden behind interfaces and a factory. ActiveQuant comes with an ActiveMQ transport layer implementations to deliver data from one place within your infrastructure to another.

	Messaging revolves around the top level domain objects MarketDataInstrument, Instrument and TradeableInstrument. For your convenience, the transport layer also offers sending and receiving data through a direct channel name. All data must fit into a hash map that contains String keys and primitive values of type Long, Double or String. Of course you might want to use your own serializer or deserializer, about which we can talk.

	Note that the messaging part fits perfectly together with the domain model.  


* ActiveMQ transport factory

	The ActiveMQ transport factory implements a transport factory. Its methods provide publisher and a receiver implementations. Notice that this implementation works through selectors rather than threads, so that the overall thread load on your system stays low, because of this approach, you can easily subscribe to thousands of Instruments through this implementation. In its current implementation it uses only ActiveMQ topics, but you are free to implement your own transport factory based on queues. 

	On purpose, it is not a singleton, as this design decision can be made easily with spring. 

* Sending data 

	The following snipplet shows you how to use it to publish some data for a specific MarketDataInstrument. 

+-----------------------+
MarketDataInstrument mdi = new MarketDataInstrument();
...

Map<String, Object> toBeDeliveredMap = new HashMap<String, Object>();
... 

IPublisher publisher = new ActiveMQTransportFactory("8.8.8.8", 61616).
				getPublisher(ETransportType.MARKET_DATA, mdi);
publisher.send(toBeDeliveredMap);
+-----------------------+

* Receiving data

	The following snipplet shows you how to use it to receive some data for a specific MarketDataInstrument. You do not need to start the receiver, it will automatically receive data. 

+-----------------------+
MarketDataInstrument mdi = new MarketDataInstrument();
...

IReceiver rec2 = new ActiveMQTransportFactory("8.8.8.8", 61616).
				getReceiver(ETransportType.MARKET_DATA, mdi);

IEventListener<Map<String, Object>> localListener = new IEventListener<Map<String, Object>>(){
	public void eventFired(final Map<String, Object> event) {		
		System.out.println("Received: " + event);
	}						
};
rec2.getMsgRecEvent().addEventListener(localListener);

+-----------------------+

		

