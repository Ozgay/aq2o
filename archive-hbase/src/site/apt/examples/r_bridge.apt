R-Bridging

	ActiveQuant knows about two approaches to bridge Java to R. First, the superb Renjin library, courtesy of {{{http://bedatadriven.com}BeDataDriven}}, is referenced in our pom and available in the source code. Second, you can use R directly to access data from AQ's archive server and its SQL database.   
	  

* Using Renjin in AQ

	Accessing Renjin from an AQ project is trivial. Use the following as an inspiration. 
	
+-------------+
import com.activequant.utils.RenjinCore;

...
	private RenjinCore R = new RenjinCore();
...
	R.put("x", closes.toArray(new Double[]{}));
	R.execute("sma = sum(x)");
	Double sma = R.getDoubleVector("sma").getElementAsObject(0)/closes.size();
+-------------+
	
	This source code is taken from {{{http://developers.activequant.org:3000/projects/aq2o/repository/entry/trunk/src/main/java/com/activequant/trading/systems/sma/SimpleMovingAverage.java}AQ's simple moving average trade system example}}.

	 
* Loading data from within R

	You can easily access data stored in AQ from R. Use the following as an inspirational example. You need to have the LocalJettyServer application running. 
	

+-----------------+
require(quantmod)
convertTimeSeries <- function(d, startCol = 3){

 parsedTime <- lapply(d[1], function(x) as.POSIXct(x/1000000000, tz="GMT", origin="1970-01-01"))
 ts <- as.data.frame(do.call(rbind, lapply(parsedTime, as.double)))
 data <- xts(d[,startCol:length(d[1,])], as.POSIXct(t(ts), tz="GMT", origin="1970-01-01"))

}

o <- read.csv("http://localhost:44444/?SERIESID=CNX.MDI.GBP/AUD&FREQ=HOURS_1&FIELD=OPEN&STARTDATE=20120524&ENDDATE=20130301");
h <- read.csv("http://localhost:44444/?SERIESID=CNX.MDI.GBP/AUD&FREQ=HOURS_1&FIELD=HIGH&STARTDATE=20120524&ENDDATE=20130301");
l <- read.csv("http://localhost:44444/?SERIESID=CNX.MDI.GBP/AUD&FREQ=HOURS_1&FIELD=LOW&STARTDATE=20120524&ENDDATE=20130301");
c <- read.csv("http://localhost:44444/?SERIESID=CNX.MDI.GBP/AUD&FREQ=HOURS_1&FIELD=CLOSE&STARTDATE=20120101&ENDDATE=20120201");

# converting to timeseries. 
o <- convertTimeSeries(o)
h <- convertTimeSeries(h)
l <- convertTimeSeries(l)
c <- convertTimeSeries(c)

ohlc = cbind(o,h,l,c)

colnames(ohlc) <- c("OPEN", "HIGH", "LOW", "CLOSE")
# png("../pricecharts/gbpaud.png",w=1000,h=600)
candleChart(ohlc)
# dev.off()
+-----------------+


* Calling R as an external program

	Yet another approach is calling R from inside AQ through the RExec command. Note, contrary to the comfortable approach of Renjin, you cannot interact with R in a direct way in your Java program. Interaction happens through files or through your R-script. Let's make this a bit more plastic. 
	
+---------+
	new RExec("/home/ustaudinger/work/activequant/trunk/src/main/resources/r/perfreport.r", 
				new String[]{targetFolder+"pnl.csv", targetFolder+"cash_positions.csv", targetFolder});
+---------+	
	
	This example calls a script called "perfreport.r" and passes as command line args to this script three local variables.
	
	 
		
	